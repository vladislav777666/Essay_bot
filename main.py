import asyncio
import aiohttp
import logging
from aiohttp import web

from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage

# === üîê –ö–û–ù–§–ò–ì ===
API_TOKEN = '8101812893:AAEXynon2ogqCX7SCbpZUpld4nAz2GKxUhA'
SUPABASE_URL = "https://wmslejierapwdicnresb.supabase.co"
SUPABASE_API_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
GEMINI_API_KEY = "AIzaSyBeU-4qbh71GbLchWE3-sTGJ72oLJMs7e0"

# === üìö –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

headers = {
    "apikey": SUPABASE_API_KEY,
    "Authorization": f"Bearer {SUPABASE_API_KEY}",
    "Content-Type": "application/json"
}

# === FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
class Form(StatesGroup):
    essay_analysis = State()
    essay_write = State()
    activity_analysis = State()
    activity_create = State()

# === –ö–Ω–æ–ø–∫–∏ ===
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üßê –ê–Ω–∞–ª–∏–∑ –≠—Å—Å–µ"), KeyboardButton(text="üíº –û—Ü–µ–Ω–∫–∞ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π")],
        [KeyboardButton(text="ü™∂ –ù–∞–ø–∏—Å–∞–Ω–∏–µ –≠—Å—Å–µ"), KeyboardButton(text="üìã –°–æ–∑–¥–∞–Ω–∏–µ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π")],
        [KeyboardButton(text="üëë –ü—Ä–µ–º–∏—É–º"), KeyboardButton(text="‚ö†Ô∏è –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
    ],
    resize_keyboard=True
)

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Gemini ===
async def gemini_query(prompt: str) -> str:
    async with aiohttp.ClientSession() as session:
        async with session.post(
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent",
            params={"key": GEMINI_API_KEY},
            json={"contents": [{"parts": [{"text": prompt}]}]}
        ) as resp:
            data = await resp.json()
            return data["candidates"][0]["content"]["parts"][0]["text"]

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
@router.message(Command("start"))
async def start_handler(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ—Å—Ç—É–ø–∏—Ç—å –≤ –≤—É–∑ –º–µ—á—Ç—ã.", reply_markup=main_menu)

@router.message(F.text == "‚ö†Ô∏è –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def tech_support(message: Message):
    await message.answer("üìû –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞: https://t.me/Geniys666")

@router.message(F.text == "üëë –ü—Ä–µ–º–∏—É–º")
async def premium_handler(message: Message):
    await message.answer(f"üí∏ –û–ø–ª–∞—Ç–∏—Ç–µ 2000‚Ç∏ –Ω–∞ Kaspi:\nüî¢ 4400 4303 8721 0856\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {message.from_user.id}")

@router.message(F.text == "üßê –ê–Ω–∞–ª–∏–∑ –≠—Å—Å–µ")
async def essay_analysis_start(message: Message, state: FSMContext):
    await message.answer("‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å —Ç–∏–ø –∏ —Ç–µ–∫—Å—Ç —ç—Å—Å–µ.")
    await state.set_state(Form.essay_analysis)

@router.message(Form.essay_analysis)
async def essay_analysis_process(message: Message, state: FSMContext):
    await state.clear()
    prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–æ—ë —ç—Å—Å–µ. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

–≠—Å—Å–µ:
{message.text}
"""
    result = await gemini_query(prompt)
    await message.answer(result[:4096])

@router.message(F.text == "ü™∂ –ù–∞–ø–∏—Å–∞–Ω–∏–µ –≠—Å—Å–µ")
async def essay_write_start(message: Message, state: FSMContext):
    await message.answer("üìú –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ: –∏—Å—Ç–æ—Ä–∏—è, —Ü–µ–ª–∏, —É–≤–ª–µ—á–µ–Ω–∏—è")
    await state.set_state(Form.essay_write)

@router.message(Form.essay_write)
async def essay_write_process(message: Message, state: FSMContext):
    await state.clear()
    prompt = f"""
–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ: {message.text}

–°–æ–∑–¥–∞–π –ª—É—á—à–µ–µ —ç—Å—Å–µ –¥–ª—è Common App.
"""
    result = await gemini_query(prompt)
    await message.answer(result[:4096])

@router.message(F.text == "üíº –û—Ü–µ–Ω–∫–∞ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π")
async def activity_analysis_start(message: Message, state: FSMContext):
    await message.answer("üìã –û—Ç–ø—Ä–∞–≤—å Extracurriculars –∏ Honors")
    await state.set_state(Form.activity_analysis)

@router.message(Form.activity_analysis)
async def activity_analysis_process(message: Message, state: FSMContext):
    await state.clear()
    prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –î–∞–π —Å–æ–≤–µ—Ç—ã.

{message.text}
"""
    result = await gemini_query(prompt)
    await message.answer(result[:4096])

@router.message(F.text == "üìã –°–æ–∑–¥–∞–Ω–∏–µ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π")
async def activity_create_start(message: Message, state: FSMContext):
    await message.answer("üìù –ù–∞–ø–∏—à–∏: –∫–ª–∞—Å—Å, –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞, —Ñ–∞–∫—É–ª—å—Ç–µ—Ç, —Å—Ç—Ä–∞–Ω–∞ –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã")
    await state.set_state(Form.activity_create)

@router.message(Form.activity_create)
async def activity_create_process(message: Message, state: FSMContext):
    await state.clear()
    prompt = f"""
–°–æ–∑–¥–∞–π 10 Extracurricular Activities.

–ò–Ω—Ñ–æ:
{message.text}
"""
    result = await gemini_query(prompt)
    await message.answer(result[:4096])

# === HTTP-—Å–µ—Ä–≤–µ—Ä ===
async def handle_healthz(request):
    return web.Response(text="OK")

async def start_web_app():
    app = web.Application()
    app.router.add_get("/healthz", handle_healthz)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8080)
    await site.start()
    print("üåê HTTP server started on http://0.0.0.0:8080")

# === –ì–õ–ê–í–ù–´–ô –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)

    async def main():
        await asyncio.gather(
            dp.start_polling(bot),
            start_web_app()
        )

    asyncio.run(main())
