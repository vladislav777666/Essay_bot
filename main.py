import asyncio
import aiohttp
import logging
import random
import string
from typing import Optional

from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.methods import DeleteMessage

from fastapi import FastAPI
from mangum import Mangum
from supabase import create_client, Client

# === üîê –ö–û–ù–§–ò–ì ===
API_TOKEN = '8101812893:AAEXynon2ogqCX7SCbpZUpld4nAz2GKxUhA'
SUPABASE_URL = "https://wmslejierapwdicnresb.supabase.co"
SUPABASE_API_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Indtc2xlamllcmFwd2RpY25yZXNiIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MTU2NzA3MSwiZXhwIjoyMDY3MTQzMDcxfQ.Zl00tGef-n-F3PZNdnYaugEvbaVL2yXfs-xvIF2nWjU"
GEMINI_API_KEY = "AIzaSyBeU-4qbh71GbLchWE3-sTGJ72oLJMs7e0"
AI_CHANNEL_ID = '-1002849785592'  

# === –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase ===
def init_supabase():
    import os
    from supabase import create_client
    from supabase.lib.client_options import ClientOptions

    # –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–∞–¥–æ)
    os.environ.pop('HTTP_PROXY', None)
    os.environ.pop('HTTPS_PROXY', None)

    client_options = ClientOptions(
        schema="public",
        auto_refresh_token=False,
        persist_session=False
    )

    return create_client(SUPABASE_URL, SUPABASE_API_KEY, options=client_options)

supabase: Client = init_supabase()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

# === FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
class Form(StatesGroup):
    essay_analysis = State()
    essay_write = State()
    activity_analysis = State()
    activity_create = State()
    ai_chat = State()

# === –ö–Ω–æ–ø–∫–∏ ===
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üßê –ê–Ω–∞–ª–∏–∑ –≠—Å—Å–µ"), KeyboardButton(text="üíº –û—Ü–µ–Ω–∫–∞ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"), KeyboardButton(text="ü§ñ –ò–ò –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç")],
        [KeyboardButton(text="ü™∂ –ù–∞–ø–∏—Å–∞–Ω–∏–µ –≠—Å—Å–µ"), KeyboardButton(text="üìã –°–æ–∑–¥–∞–Ω–∏–µ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π")],
        [KeyboardButton(text="üëë –ü—Ä–µ–º–∏—É–º"), KeyboardButton(text="üîó –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ‚Äë—Å—Å—ã–ª–∫—É"), KeyboardButton(text="‚ö†Ô∏è –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
    ],
    resize_keyboard=True
)

# === –£—Ç–∏–ª–∏—Ç—ã ===
def gen_ref() -> str:
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))

async def gemini_query(prompt: str) -> str:
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent",
                params={"key": GEMINI_API_KEY},
                json={"contents": [{"parts": [{"text": prompt}]}]}
            ) as resp:
                if resp.status != 200:
                    error = await resp.text()
                    logging.error(f"Gemini API error: {resp.status} - {error}")
                    return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

                data = await resp.json()
                if not data.get("candidates"):
                    logging.error(f"Unexpected Gemini response: {data}")
                    return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞."

                return data["candidates"][0]["content"]["parts"][0]["text"][:4096]
                
    except Exception as e:
        logging.error(f"Gemini query failed: {str(e)}")
        return f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"

async def is_premium(user_id: int) -> bool:
    try:
        resp = supabase.table('subscriptions').select('is_premium').eq('user_id', user_id).execute()
        return resp.data and resp.data[0].get('is_premium', False)
    except Exception as e:
        logging.error(f"Supabase error: {str(e)}")
        return False

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===

@router.message(Command("start"))
async def start_handler(message: Message):
    try:
        args = message.text.split(maxsplit=1)
        ref = args[1].replace("ref_", "") if len(args) > 1 and args[1].startswith("ref_") else None

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_resp = supabase.table('users').select('id').eq('id', message.from_user.id).execute()
        
        if not user_resp.data:
            code = gen_ref()
            supabase.table('users').insert({
                'id': message.from_user.id,
                'username': message.from_user.username or '',
                'ref_code': code
            }).execute()
            
            supabase.table('subscriptions').insert({
                'user_id': message.from_user.id
            }).execute()

            if ref:
                inviter = supabase.table('users').select('id').eq('ref_code', ref).execute()
                if inviter.data:
                    supabase.table('subscriptions').update({
                        'referred_by': inviter.data[0]['id'],
                        'discount_percent': 10
                    }).eq('user_id', message.from_user.id).execute()

        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ—Å—Ç—É–ø–∏—Ç—å –≤ –≤—É–∑ –º–µ—á—Ç—ã.\n\n"
            "–°–µ–π—á–∞—Å —è –º–æ–≥—É:\n\n"
            "‚Ä¢ üßê –°–¥–µ–ª–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç–≤–æ–µ–≥–æ —ç—Å—Å–µ –∏ –¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
            "‚Ä¢ üíº –û—Ü–µ–Ω–∏—Ç—å —Ç–≤–æ—ë –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏ –ø–æ–º–æ—á—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ ü§ñ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω—Ç–æ—Ä\n\n"
            "‚Ä¢ üëë –ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏:\n"
            "‚Ä¢ ü™∂ –ù–∞–ø–∏—Å–∞–Ω–∏–µ —ç—Å—Å–µ - –ø–æ–º–æ–≥—É –≤—ã–¥–µ–ª–∏—Ç—å —Ç–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã\n"
            "‚Ä¢ üìã –°–æ–∑–¥–∞–Ω–∏–µ –ª—É—á—à–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è",
            reply_markup=main_menu
        )
    except Exception as e:
        logging.error(f"Start handler error: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "‚ö†Ô∏è –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def tech_support(message: Message):
    await message.answer(
        "–í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º:\n\n"
        "1. –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "2. –û—à–∏–±–∫–∏ –∏ –±–∞–≥–∏ –≤ –±–æ—Ç–µ\n"
        "3. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è\n\n"
        "–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞: https://t.me/Geniys666"
    )

@router.message(F.text == "üëë –ü—Ä–µ–º–∏—É–º")
async def premium_handler(message: Message):
    try:
        sub = supabase.table('subscriptions').select('discount_percent,is_premium').eq('user_id', message.from_user.id).execute()
        if not sub.data:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏.")
            return
            
        sub_data = sub.data[0]
        if sub_data.get("is_premium"):
            await message.answer("üéâ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø!")
        else:
            disc = sub_data.get("discount_percent", 0)
            price = 2000 * (100 - disc) // 100
            await message.answer(
                f"üí∏ –û–ø–ª–∞—Ç–∏—Ç–µ {price}‚Ç∏ –Ω–∞ Kaspi:\nüî¢ 4400 4303 8721 0856\n"
                f"üìù –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram ID: {message.from_user.id}"
            )
    except Exception as e:
        logging.error(f"Premium handler error: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

@router.message(F.text == "üîó –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ‚Äë—Å—Å—ã–ª–∫—É")
async def get_ref_link(message: Message):
    try:
        data = supabase.table('users').select('ref_code').eq('id', message.from_user.id).execute()
        if not data.data:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ñ—Å—Å—ã–ª–∫–∏.")
            return
            
        code = data.data[0]['ref_code']
        await message.answer(f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\nhttps://t.me/EssayWritterKZ_bot?start=ref_{code}")
    except Exception as e:
        logging.error(f"Ref link error: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ñ—Å—Å—ã–ª–∫–∏.")

@router.message(F.text == "üßê –ê–Ω–∞–ª–∏–∑ –≠—Å—Å–µ")
async def essay_analysis_start(message: Message, state: FSMContext):
    await message.answer("‚úçÔ∏è –í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —ç—Å—Å–µ. –Ø —Å–¥–µ–ª–∞—é –∞–Ω–∞–ª–∏–∑.")
    await state.set_state(Form.essay_analysis)

@router.message(Form.essay_analysis)
async def essay_analysis_process(message: Message, state: FSMContext):
    try:
        msg = await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —ç—Å—Å–µ...")
        prompt = f"""–í–æ—Ç —Ç–µ–∫—Å—Ç —ç—Å—Å–µ: {message.text}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Å—Å–µ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º Hook Strength, Readability, Structural Coherence, Logical Flow –∏ Emotional Resonance.

–î–∞–π —á–µ—Å—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Å–æ–≤–µ—Ç—ã. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ø–∏—Å–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –†–∞–∑–¥–µ–ª—è–π –∞–±–∑–∞—Ü—ã –¥–≤–æ–π–Ω—ã–º –ø–µ—Ä–µ–Ω–æ—Å–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π —Å–º–∞–π–ª–∏–∫–∏."""
        
        result = await gemini_query(prompt)
        await bot(DeleteMessage(chat_id=message.chat.id, message_id=msg.message_id))
        await message.answer(result)
    except Exception as e:
        logging.error(f"Essay analysis error: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —ç—Å—Å–µ.")
    finally:
        await state.clear()

@router.message(F.text == "üíº –û—Ü–µ–Ω–∫–∞ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π")
async def activity_analysis_start(message: Message, state: FSMContext):
    await message.answer("üìã –í—Å—Ç–∞–≤—å—Ç–µ Extracurriculars –∏ Honors –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    await state.set_state(Form.activity_analysis)

@router.message(Form.activity_analysis)
async def activity_analysis_process(message: Message, state: FSMContext):
    try:
        msg = await message.answer("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...")
        prompt = f"""–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {message.text}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ. –û—Ç–º–µ—Ç—å —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, —Å–æ–≤–µ—Ç—ã. –ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π —Å–º–∞–π–ª–∏–∫–∏, –¥–≤–æ–π–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã."""
        
        result = await gemini_query(prompt)
        await bot(DeleteMessage(chat_id=message.chat.id, message_id=msg.message_id))
        await message.answer(result)
    except Exception as e:
        logging.error(f"Activity analysis error: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π.")
    finally:
        await state.clear()

@router.message(F.text == "ü™∂ –ù–∞–ø–∏—Å–∞–Ω–∏–µ –≠—Å—Å–µ")
async def essay_write_start(message: Message, state: FSMContext):
    if not await is_premium(message.from_user.id):
        await message.answer("üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    await message.answer("üìú –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ. –Ø –Ω–∞–ø–∏—à—É —ç—Å—Å–µ.")
    await state.set_state(Form.essay_write)

@router.message(Form.essay_write)
async def essay_write_process(message: Message, state: FSMContext):
    try:
        msg = await message.answer("‚è≥ –ü–∏—à—É —ç—Å—Å–µ...")
        prompt = f"""–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {message.text}

–°–æ–∑–¥–∞–π —ç—Å—Å–µ –¥–ª—è Common App. –î–æ 650 —Å–ª–æ–≤. –°—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥, –ø—Ä–∏–º–µ—Ä—ã, —Å–º–∞–π–ª–∏–∫–∏. –ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        
        result = await gemini_query(prompt)
        await bot(DeleteMessage(chat_id=message.chat.id, message_id=msg.message_id))
        await message.answer(result)
    except Exception as e:
        logging.error(f"Essay write error: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ —ç—Å—Å–µ.")
    finally:
        await state.clear()

@router.message(F.text == "üìã –°–æ–∑–¥–∞–Ω–∏–µ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π")
async def activity_create_start(message: Message, state: FSMContext):
    if not await is_premium(message.from_user.id):
        await message.answer("üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    await message.answer("üéì –ù–∞–ø–∏—à–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç, —Å—Ç—Ä–∞–Ω—É, –∏–Ω—Ç–µ—Ä–µ—Å—ã.")
    await state.set_state(Form.activity_create)

@router.message(Form.activity_create)
async def activity_create_process(message: Message, state: FSMContext):
    try:
        msg = await message.answer("‚è≥ –ü–æ–¥–±–∏—Ä–∞—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...")
        prompt = f"""–î–∞–Ω–Ω—ã–µ: {message.text}

–°–æ–∑–¥–∞–π 15-20 Extracurricular Activities, –Ω–∞–∑–≤–∞–Ω–∏—è, –æ–ø–∏—Å–∞–Ω–∏–µ, —Å—Å—ã–ª–∫–∏. –ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —Å–æ —Å–º–∞–π–ª–∏–∫–∞–º–∏, –¥–≤–æ–π–Ω—ã–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏."""
        
        result = await gemini_query(prompt)
        await bot(DeleteMessage(chat_id=message.chat.id, message_id=msg.message_id))
        await message.answer(result)
    except Exception as e:
        logging.error(f"Activity create error: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π.")
    finally:
        await state.clear()

@router.message(F.text == "ü§ñ –ò–ò –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç")
async def ai_chat_start(message: Message, state: FSMContext):
    await message.answer("üéôÔ∏è –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –ø–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é.")
    await state.set_state(Form.ai_chat)

@router.message(Form.ai_chat)
async def ai_chat_process(message: Message, state: FSMContext):
    try:
        msg = await message.answer("‚è≥ –î—É–º–∞—é...")
        prompt = f"""–¢—ã ‚Äî –º–µ–Ω—Ç–æ—Ä –ø–æ Ivy League. –û—Ç–≤–µ—á–∞–π —á–µ—Å—Ç–Ω–æ, —Å–æ —Å–º–∞–π–ª–∏–∫–∞–º–∏. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã.

–í–æ–ø—Ä–æ—Å: {message.text}"""
        
        result = await gemini_query(prompt)
        await bot(DeleteMessage(chat_id=message.chat.id, message_id=msg.message_id))
        await message.answer(result)

        if AI_CHANNEL_ID:
            await bot.send_message(
                chat_id=AI_CHANNEL_ID, 
                text=f"üß† –í–æ–ø—Ä–æ—Å –æ—Ç @{message.from_user.username or message.from_user.id}:\n\n{message.text}"
            )
    except Exception as e:
        logging.error(f"AI chat error: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞.")
    finally:
        await state.clear()

# === FastAPI HTTP-—Å–µ—Ä–≤–µ—Ä ===
app = FastAPI()

@app.get("/healthz")
def health_check():
    return {"status": "ok"}

handler = Mangum(app)

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    )
    asyncio.run(dp.start_polling(bot))
