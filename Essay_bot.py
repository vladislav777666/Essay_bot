import asyncio
import aiohttp
import sqlite3
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.filters import Command

API_TOKEN = '8101812893:AAEXynon2ogqCX7SCbpZUpld4nAz2GKxUhA'
DA_ACCESS_TOKEN = '9dX94XworRBHUXgvHJbL'

# üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# üîê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
conn = sqlite3.connect("premium_users.db")
cursor = conn.cursor()
cursor.execute("CREATE TABLE IF NOT EXISTS premium (user_id INTEGER PRIMARY KEY)")
conn.commit()

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ë–î
def is_premium(user_id: int) -> bool:
    cursor.execute("SELECT 1 FROM premium WHERE user_id=?", (user_id,))
    return cursor.fetchone() is not None

# ‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –ë–î
def add_premium(user_id: int):
    try:
        cursor.execute("INSERT INTO premium VALUES (?)", (user_id,))
        conn.commit()
    except sqlite3.IntegrityError:
        pass  # –£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω

# üß≠ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üëë –ü—Ä–µ–º–∏—É–º")]
    ],
    resize_keyboard=True
)

# üöÄ /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–∏—à–µ—Ç —ç—Å—Å–µ.\n\n"
        f"1Ô∏è‚É£ –û–ø–ª–∞—Ç–∏: https://www.donationalerts.com/r/essay_bot\n"
        f"2Ô∏è‚É£ –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∫–∞–∂–∏ Telegram ID: {message.from_user.id}\n"
        f"3Ô∏è‚É£ –ù–∞–∂–º–∏ /check –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.",
        reply_markup=main_menu
    )

# üîç /check ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–Ω–∞—Ç–∞
@dp.message(Command("check"))
async def cmd_check(message: Message):
    tg_id = str(message.from_user.id)

    async with aiohttp.ClientSession() as session:
        headers = {'Authorization': f'Bearer {DA_ACCESS_TOKEN}'}
        async with session.get('https://www.donationalerts.com/api/v1/donations', headers=headers) as resp:
            if resp.status != 200:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ API: —Å—Ç–∞—Ç—É—Å {resp.status}")
                return

            data = await resp.json()

            for donation in data.get('data', []):
                comment = donation.get('message', '')
                if tg_id in comment:
                    if donation['id'] not in checked_donors:
                        checked_donors.add(donation['id'])
                        add_premium(message.from_user.id)
                        await message.answer("‚úÖ –î–æ–Ω–∞—Ç –Ω–∞–π–¥–µ–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø üéâ")
                        return

            await message.answer("‚ùå –î–æ–Ω–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —É–∫–∞–∑–∞–ª ID –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.")

# üîò –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–º–∏—É–º"
@dp.message(F.text == "üëë –ü—Ä–µ–º–∏—É–º")
async def check_premium(message: Message):
    if is_premium(message.from_user.id):
        await message.answer("‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø.")
    else:
        await message.answer(
            f"üîí –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.\n\n"
            f"1Ô∏è‚É£ –°–¥–µ–ª–∞–π—Ç–µ –¥–æ–Ω–∞—Ç: https://www.donationalerts.com/r/essay_bot\n"
            f"2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ Telegram ID: {message.from_user.id}\n"
            f"3Ô∏è‚É£ –ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ /check"
        )

# üì¶ –°–ø–∏—Å–æ–∫ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –¥–æ–Ω–∞—Ç–æ–≤
checked_donors = set()

# üèÅ –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    dp.run_polling(bot)
